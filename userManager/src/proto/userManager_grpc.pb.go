// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/userManager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagerClient is the client API for UserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerClient interface {
	UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	UserLoginWithSessionID(ctx context.Context, in *UserLoginWithSessionIDRequest, opts ...grpc.CallOption) (*UserLoginWithSessionIDResponse, error)
	UserCoinAssetChange(ctx context.Context, in *UserCoinAssetChangeRequest, opts ...grpc.CallOption) (*UserCoinAssetChangeResponse, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	GetTopPlayers(ctx context.Context, in *GetTopPlayersRequest, opts ...grpc.CallOption) (*GetTopPlayersResponse, error)
}

type userManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerClient(cc grpc.ClientConnInterface) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, "/UserManager/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, "/UserManager/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) UserLoginWithSessionID(ctx context.Context, in *UserLoginWithSessionIDRequest, opts ...grpc.CallOption) (*UserLoginWithSessionIDResponse, error) {
	out := new(UserLoginWithSessionIDResponse)
	err := c.cc.Invoke(ctx, "/UserManager/UserLoginWithSessionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) UserCoinAssetChange(ctx context.Context, in *UserCoinAssetChangeRequest, opts ...grpc.CallOption) (*UserCoinAssetChangeResponse, error) {
	out := new(UserCoinAssetChangeResponse)
	err := c.cc.Invoke(ctx, "/UserManager/UserCoinAssetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/UserManager/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetTopPlayers(ctx context.Context, in *GetTopPlayersRequest, opts ...grpc.CallOption) (*GetTopPlayersResponse, error) {
	out := new(GetTopPlayersResponse)
	err := c.cc.Invoke(ctx, "/UserManager/GetTopPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServer is the server API for UserManager service.
// All implementations should embed UnimplementedUserManagerServer
// for forward compatibility
type UserManagerServer interface {
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	UserLoginWithSessionID(context.Context, *UserLoginWithSessionIDRequest) (*UserLoginWithSessionIDResponse, error)
	UserCoinAssetChange(context.Context, *UserCoinAssetChangeRequest) (*UserCoinAssetChangeResponse, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	GetTopPlayers(context.Context, *GetTopPlayersRequest) (*GetTopPlayersResponse, error)
}

// UnimplementedUserManagerServer should be embedded to have forward compatible implementations.
type UnimplementedUserManagerServer struct {
}

func (UnimplementedUserManagerServer) UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserManagerServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserManagerServer) UserLoginWithSessionID(context.Context, *UserLoginWithSessionIDRequest) (*UserLoginWithSessionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginWithSessionID not implemented")
}
func (UnimplementedUserManagerServer) UserCoinAssetChange(context.Context, *UserCoinAssetChangeRequest) (*UserCoinAssetChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCoinAssetChange not implemented")
}
func (UnimplementedUserManagerServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserManagerServer) GetTopPlayers(context.Context, *GetTopPlayersRequest) (*GetTopPlayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopPlayers not implemented")
}

// UnsafeUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServer will
// result in compilation errors.
type UnsafeUserManagerServer interface {
	mustEmbedUnimplementedUserManagerServer()
}

func RegisterUserManagerServer(s grpc.ServiceRegistrar, srv UserManagerServer) {
	s.RegisterService(&UserManager_ServiceDesc, srv)
}

func _UserManager_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).UserRegister(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_UserLoginWithSessionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginWithSessionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).UserLoginWithSessionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/UserLoginWithSessionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).UserLoginWithSessionID(ctx, req.(*UserLoginWithSessionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_UserCoinAssetChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCoinAssetChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).UserCoinAssetChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/UserCoinAssetChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).UserCoinAssetChange(ctx, req.(*UserCoinAssetChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetTopPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetTopPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/GetTopPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetTopPlayers(ctx, req.(*GetTopPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManager_ServiceDesc is the grpc.ServiceDesc for UserManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserRegister",
			Handler:    _UserManager_UserRegister_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserManager_UserLogin_Handler,
		},
		{
			MethodName: "UserLoginWithSessionID",
			Handler:    _UserManager_UserLoginWithSessionID_Handler,
		},
		{
			MethodName: "UserCoinAssetChange",
			Handler:    _UserManager_UserCoinAssetChange_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserManager_GetUserInfo_Handler,
		},
		{
			MethodName: "GetTopPlayers",
			Handler:    _UserManager_GetTopPlayers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/userManager.proto",
}
