// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/gameManager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameManagerClient is the client API for GameManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameManagerClient interface {
	RequireNewGame(ctx context.Context, in *RequireNewGameRequest, opts ...grpc.CallOption) (*RequireNewGameResponse, error)
	CancelRequireGame(ctx context.Context, in *CancelRequireGameRequest, opts ...grpc.CallOption) (*CancelRequireGameResponse, error)
	AcceptNewGame(ctx context.Context, in *AcceptNewGameRequest, opts ...grpc.CallOption) (*AcceptNewGameResponse, error)
	Shoot(ctx context.Context, in *ShootRequest, opts ...grpc.CallOption) (*ShootResponse, error)
	RequireFirstShoot(ctx context.Context, in *RequireFirstShootRequest, opts ...grpc.CallOption) (*RequireFirstShootResponse, error)
	InformTimeOut(ctx context.Context, in *InformTimeOutRequest, opts ...grpc.CallOption) (*InformTimeOutResponse, error)
}

type gameManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameManagerClient(cc grpc.ClientConnInterface) GameManagerClient {
	return &gameManagerClient{cc}
}

func (c *gameManagerClient) RequireNewGame(ctx context.Context, in *RequireNewGameRequest, opts ...grpc.CallOption) (*RequireNewGameResponse, error) {
	out := new(RequireNewGameResponse)
	err := c.cc.Invoke(ctx, "/GameManager/RequireNewGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) CancelRequireGame(ctx context.Context, in *CancelRequireGameRequest, opts ...grpc.CallOption) (*CancelRequireGameResponse, error) {
	out := new(CancelRequireGameResponse)
	err := c.cc.Invoke(ctx, "/GameManager/CancelRequireGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) AcceptNewGame(ctx context.Context, in *AcceptNewGameRequest, opts ...grpc.CallOption) (*AcceptNewGameResponse, error) {
	out := new(AcceptNewGameResponse)
	err := c.cc.Invoke(ctx, "/GameManager/AcceptNewGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) Shoot(ctx context.Context, in *ShootRequest, opts ...grpc.CallOption) (*ShootResponse, error) {
	out := new(ShootResponse)
	err := c.cc.Invoke(ctx, "/GameManager/Shoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) RequireFirstShoot(ctx context.Context, in *RequireFirstShootRequest, opts ...grpc.CallOption) (*RequireFirstShootResponse, error) {
	out := new(RequireFirstShootResponse)
	err := c.cc.Invoke(ctx, "/GameManager/RequireFirstShoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameManagerClient) InformTimeOut(ctx context.Context, in *InformTimeOutRequest, opts ...grpc.CallOption) (*InformTimeOutResponse, error) {
	out := new(InformTimeOutResponse)
	err := c.cc.Invoke(ctx, "/GameManager/InformTimeOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameManagerServer is the server API for GameManager service.
// All implementations should embed UnimplementedGameManagerServer
// for forward compatibility
type GameManagerServer interface {
	RequireNewGame(context.Context, *RequireNewGameRequest) (*RequireNewGameResponse, error)
	CancelRequireGame(context.Context, *CancelRequireGameRequest) (*CancelRequireGameResponse, error)
	AcceptNewGame(context.Context, *AcceptNewGameRequest) (*AcceptNewGameResponse, error)
	Shoot(context.Context, *ShootRequest) (*ShootResponse, error)
	RequireFirstShoot(context.Context, *RequireFirstShootRequest) (*RequireFirstShootResponse, error)
	InformTimeOut(context.Context, *InformTimeOutRequest) (*InformTimeOutResponse, error)
}

// UnimplementedGameManagerServer should be embedded to have forward compatible implementations.
type UnimplementedGameManagerServer struct {
}

func (UnimplementedGameManagerServer) RequireNewGame(context.Context, *RequireNewGameRequest) (*RequireNewGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequireNewGame not implemented")
}
func (UnimplementedGameManagerServer) CancelRequireGame(context.Context, *CancelRequireGameRequest) (*CancelRequireGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRequireGame not implemented")
}
func (UnimplementedGameManagerServer) AcceptNewGame(context.Context, *AcceptNewGameRequest) (*AcceptNewGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptNewGame not implemented")
}
func (UnimplementedGameManagerServer) Shoot(context.Context, *ShootRequest) (*ShootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shoot not implemented")
}
func (UnimplementedGameManagerServer) RequireFirstShoot(context.Context, *RequireFirstShootRequest) (*RequireFirstShootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequireFirstShoot not implemented")
}
func (UnimplementedGameManagerServer) InformTimeOut(context.Context, *InformTimeOutRequest) (*InformTimeOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformTimeOut not implemented")
}

// UnsafeGameManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameManagerServer will
// result in compilation errors.
type UnsafeGameManagerServer interface {
	mustEmbedUnimplementedGameManagerServer()
}

func RegisterGameManagerServer(s grpc.ServiceRegistrar, srv GameManagerServer) {
	s.RegisterService(&GameManager_ServiceDesc, srv)
}

func _GameManager_RequireNewGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequireNewGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).RequireNewGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameManager/RequireNewGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).RequireNewGame(ctx, req.(*RequireNewGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_CancelRequireGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequireGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).CancelRequireGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameManager/CancelRequireGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).CancelRequireGame(ctx, req.(*CancelRequireGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_AcceptNewGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptNewGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).AcceptNewGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameManager/AcceptNewGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).AcceptNewGame(ctx, req.(*AcceptNewGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_Shoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).Shoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameManager/Shoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).Shoot(ctx, req.(*ShootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_RequireFirstShoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequireFirstShootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).RequireFirstShoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameManager/RequireFirstShoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).RequireFirstShoot(ctx, req.(*RequireFirstShootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameManager_InformTimeOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InformTimeOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameManagerServer).InformTimeOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GameManager/InformTimeOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameManagerServer).InformTimeOut(ctx, req.(*InformTimeOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameManager_ServiceDesc is the grpc.ServiceDesc for GameManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GameManager",
	HandlerType: (*GameManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequireNewGame",
			Handler:    _GameManager_RequireNewGame_Handler,
		},
		{
			MethodName: "CancelRequireGame",
			Handler:    _GameManager_CancelRequireGame_Handler,
		},
		{
			MethodName: "AcceptNewGame",
			Handler:    _GameManager_AcceptNewGame_Handler,
		},
		{
			MethodName: "Shoot",
			Handler:    _GameManager_Shoot_Handler,
		},
		{
			MethodName: "RequireFirstShoot",
			Handler:    _GameManager_RequireFirstShoot_Handler,
		},
		{
			MethodName: "InformTimeOut",
			Handler:    _GameManager_InformTimeOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gameManager.proto",
}
